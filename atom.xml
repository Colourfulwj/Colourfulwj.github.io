<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ColourHub</title>
  
  
  <link href="https://colourfulywj.cn/atom.xml" rel="self"/>
  
  <link href="https://colourfulywj.cn/"/>
  <updated>2021-05-12T14:23:26.171Z</updated>
  <id>https://colourfulywj.cn/</id>
  
  <author>
    <name>Colourful</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一维定态Schrodinger方程在均匀势场区域内的通解</title>
    <link href="https://colourfulywj.cn/2021/05/12/%E4%B8%80%E7%BB%B4%E5%AE%9A%E6%80%81Schrodinger%E6%96%B9%E7%A8%8B%E5%9C%A8%E5%9D%87%E5%8C%80%E5%8A%BF%E5%9C%BA%E5%8C%BA%E5%9F%9F%E5%86%85%E7%9A%84%E9%80%9A%E8%A7%A3/"/>
    <id>https://colourfulywj.cn/2021/05/12/%E4%B8%80%E7%BB%B4%E5%AE%9A%E6%80%81Schrodinger%E6%96%B9%E7%A8%8B%E5%9C%A8%E5%9D%87%E5%8C%80%E5%8A%BF%E5%9C%BA%E5%8C%BA%E5%9F%9F%E5%86%85%E7%9A%84%E9%80%9A%E8%A7%A3/</id>
    <published>2021-05-12T09:54:00.000Z</published>
    <updated>2021-05-12T14:23:26.171Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>已知一维定态Schrodinger方程为：</p><script type="math/tex; mode=display">\frac{\mathrm{d}^{2}}{\mathrm{~d} x^{2}} \psi(x)+\frac{2 m}{\hbar^{2}}[E-V(x)] \psi(x)=0</script><p>设在 <script type="math/tex">x</script> 轴上区间 <script type="math/tex">\left[x_{1}, x_{2}\right]</script> 范围内，势能函数是一个均匀常数，则在此区间内一维定态Schrodinger方程就变为二阶线性齐次常系数微分方程，即在这个 <script type="math/tex">\left[x_{1}, x_{2}\right]</script> 区间内</p><script type="math/tex; mode=display">\left.\begin{array}{rl}\alpha & =\left[\frac{2 m}{\hbar^{2}}[E-V(x)]\right]^{1 / 2} \\\beta & =\left[\frac{2 m}{\hbar^{2}}[V(x)-E]\right]^{1 / 2}\end{array}\right\} \alpha=\mathrm{i} \beta</script><p>上式中的 α 和 β 也为常数，则在这个区间内一维定态Schrodinger方程的特征方程若存在两个互异的实根，则其通解为</p><script type="math/tex; mode=display">\psi(x)=A \mathrm{e}^{\mathrm{i} \alpha x}+B \mathrm{e}^{-\mathrm{i} \alpha x} \quad(A, B \text { 为复常数 })(1)</script><p>或</p><script type="math/tex; mode=display">\psi(x)=A \mathrm{e}^{-\beta x}+B \mathrm{e}^{\beta x} \quad(A, B \text { 为复常数 })(2)</script><ol><li>若在 <script type="math/tex">\left[x_{1}, x_{2}\right]</script> 范围内 <script type="math/tex">E=V(x)</script></li></ol><script type="math/tex; mode=display">\alpha=\beta=0$$，则一维定态Schrodinger方程有2重实根，通解为：</script><p>\psi(x)=A+B x \quad(A, B \text { 为复常数 })</p><script type="math/tex; mode=display">2. 若在$$\left[x_{1}, x_{2}\right]$$范围内$$E>V(x)$$(经典允许区)α 为正实数，β 为负纯虚数，此时一维定态Schrodinger方程的通解取式 (1) 的形式：</script><p>\psi(x)=A \mathrm{e}^{\mathrm{i} \alpha x}+B \mathrm{e}^{-\mathrm{i} \alpha x} \quad(A, B \text { 为复常数 })</p><script type="math/tex; mode=display">也可以写成</script><p>\psi(x)=(A+B) \cos (\alpha x)+(\mathrm{i} A-\mathrm{i} B) \sin (\alpha x)</p><script type="math/tex; mode=display">设</script><p>A+B=C,  \mathrm{i} A-\mathrm{i} B=D</p><script type="math/tex; mode=display">，则</script><p>\psi(x)=C \cos \alpha x+D \sin \alpha x \quad(C, D \text { 为复常数 })</p><script type="math/tex; mode=display">即在势场均匀区域$$\left[x_{1}, x_{2}\right]$$内，若$$E>V(x)$$，则在该区域内的$$\psi(x)$$必是按照</script><p>\sin \alpha x</p><script type="math/tex; mode=display">和</script><p>\cos \alpha x</p><script type="math/tex; mode=display">进行振荡的形式。3. 若在 $$\left[x_{1}, x_{2}\right]$$ 范围内 $$E<V(x)$$ (经典禁区)α 为正纯虚数，β 为正实数，此时一维定态Schrodinger方程的通解取式 (2) 的形式：</script><p>\psi(x)=A \mathrm{e}^{-\beta x}+B e^{\beta x} \quad(A, B \text { 为复常数 })</p><p><script type="math/tex">此时在区间</script>\left[x_{1}, x_{2}\right]<script type="math/tex">，</script>\psi(x)$$ 不再是振荡解的形式，而是 e 指数解的形式。</p><p> <script type="math/tex">\psi(x)=A+B x</script> ， <script type="math/tex">\psi(x)=C \cos \alpha x+D \sin \alpha x</script> ， <script type="math/tex">\psi(x)=A \mathrm{e}^{-\beta x}+B e^{\beta x}</script> 都是一维定态Schrodinger方程在均匀势场中的通解。我们约定：如果 α 是正实数，则一维定态Schrodinger方程在均匀势场中的通解取 <script type="math/tex">\psi(x)=A+B x</script> 或  <script type="math/tex">\psi(x)=C \cos \alpha x+D \sin \alpha x</script>   的形式；如果β 为正实数，则一维定态Schrodinger方程在均匀势场中的通解取 <script type="math/tex">\psi(x)=A \mathrm{e}^{-\beta x}+B e^{\beta x}</script> 的形式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;已知一维定态Schrodinger方程为：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\frac{\mathrm{d}^{2}}{\mathrm{~d} x^{2}} \psi(x)+\frac</summary>
      
    
    
    
    <category term="量子力学" scheme="https://colourfulywj.cn/categories/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>任意线性算符Hermite的分解</title>
    <link href="https://colourfulywj.cn/2021/04/23/%E4%BB%BB%E6%84%8F%E7%BA%BF%E6%80%A7%E7%AE%97%E7%AC%A6Hermite%E7%9A%84%E5%88%86%E8%A7%A3/"/>
    <id>https://colourfulywj.cn/2021/04/23/%E4%BB%BB%E6%84%8F%E7%BA%BF%E6%80%A7%E7%AE%97%E7%AC%A6Hermite%E7%9A%84%E5%88%86%E8%A7%A3/</id>
    <published>2021-04-23T11:50:47.000Z</published>
    <updated>2021-05-12T09:57:39.256Z</updated>
    
    <content type="html"><![CDATA[<p>设有任意一个算符<script type="math/tex">\hat{A}</script>（<script type="math/tex">\hat{A}</script>可能是Hermite的，也可能不是Hermite的），其自伴算符为<script type="math/tex">\hat{A}^{+}</script>，则构造两个新算符：</p><script type="math/tex; mode=display">\hat{A}_{+}=\frac{1}{2}\left(\hat{A}+\hat{A}^{+}\right)</script><script type="math/tex; mode=display">\hat{A}_{-}=\frac{1}{2 \mathrm{i}}\left(\hat{A}-\hat{A}^{+}\right)</script><script type="math/tex; mode=display">\begin{array}{l}\hat{A}_{+}=\frac{1}{2}\left(\hat{A}+\hat{A}^{+}\right) \Rightarrow \hat{A}_{+}^{+}=\frac{1}{2}\left(\hat{A}^{+}+\hat{A}^{++}\right)=\frac{1}{2}\left(\hat{A}^{+}+\hat{A}\right)=\hat{A}_{+} \\\hat{A}_{-}=\frac{1}{2 \mathrm{i}}\left(\hat{A}-\hat{A}^{+}\right)=\frac{-\mathrm{i}}{2}\left(\hat{A}-\hat{A}^{+}\right) \Rightarrow \hat{A}_{-}^{+} \\\quad=\frac{1}{2}\left(\hat{A}^{+}-\hat{A}^{++}\right) \mathrm{i}=\frac{\mathrm{i}}{2}\left(\hat{A}^{+}-\hat{A}\right)=\frac{-\mathrm{i}}{2}\left(\hat{A}-\hat{A}^{+}\right)=\hat{A}_{-}\end{array}</script><p>由上面的运算可以知道，<script type="math/tex">\hat{A}_{+}</script>和<script type="math/tex">\hat{A}_{-}</script>都是Hermite的。</p><script type="math/tex; mode=display">\begin{array}{l}\hat{A}=\hat{A}_{+}+\mathrm{i} \hat{A}_{-} \\\hat{A}^{+}=\hat{A}_{+}-\mathrm{i} \hat{A}_{-}\end{array}</script><p>根据上面的关系式，可以快速得到一个算符的相关Hermite的算符。</p><p>例：已知粒子的坐标<script type="math/tex">\mathbf{r}</script>和动量<script type="math/tex">\mathbf{p}</script>为厄米算符，判断下列算符是否为厄米算符：<script type="math/tex">\mathbf{l} = \mathbf{r} \times \mathbf{p}</script> , <script type="math/tex">\mathbf{r} \cdot \mathbf{p}</script> , <script type="math/tex">\mathbf{p} \times \mathbf{l}</script> , <script type="math/tex">\mathbf{r} \times \mathbf{l}</script>如果不是，试构造相应的厄米算符。</p><p>解：对于<script type="math/tex">\mathbf{l}=\mathbf{r} \times \mathbf{p}</script>，有</p><script type="math/tex; mode=display">l_{x}=y p_{z}-z p_{y}</script><script type="math/tex; mode=display">l_{x}^{+}=\left(y p_{z}-z p_{y}\right)^{+}=\left(p_{z}^{+} y^{+}-p_{y}^{+} z^{+}\right)=\left(p_{z} y-p y^{z}\right)=y p_{z}-z p_{y}=l_{x}</script><p>同理</p><script type="math/tex; mode=display">l_{y}^{+}=l_{y}, \quad l_{z}^{+}=l_{z}</script><p>所以<script type="math/tex">\mathbf{l}=\mathbf{r} \times \mathbf{p}=\mathbf{l}^{+}</script>是厄米算符。</p><p>对于<script type="math/tex">\mathbf{r} \cdot \mathbf{p}</script>，有</p><script type="math/tex; mode=display">\begin{array}{l}(\mathbf{r} \cdot \mathbf{p})^{+}=\left(x p_{x}+y p_{y}+z p_{z}\right)^{+}=p_{x}^{+} x^{+}+p_{y}^{+} y^{+}+p_{z}^{+} z^{+} \\= p_{x} x+p_{y} y+p_{z} z \neq x p_{x}+y p_{y}+z p_{z}\end{array}</script><p>所以 <script type="math/tex">\mathbf{r} \cdot \mathbf{p}</script> 不是厄米算符，而</p><script type="math/tex; mode=display">\begin{aligned}(\mathbf{r} \cdot \mathbf{p})^{+} &=\mathbf{p} \cdot \mathbf{r}=p_{x} x+p_{y} y+p_{z} z=\left(x p_{x}-\mathrm{i} \hbar\right)+\left(y p_{y}-\mathrm{i} \hbar\right)+\left(z p_{z}-\mathrm{i} \hbar\right) \\&=\mathbf{r} \cdot \mathbf{p}-3 \mathrm{i} \hbar\end{aligned}</script><p>相应的厄米算符为<script type="math/tex">\frac{1}{2}[\mathbf{r} \cdot \mathbf{p}+\mathbf{p} \cdot \mathbf{r}]=\mathbf{r} \cdot \mathbf{p}-3 \mathrm{i} \hbar / 2</script>。</p><p>类似有<script type="math/tex">(\mathbf{p} \times \mathbf{l})^{+}=-(\mathbf{l} \times \mathbf{p})</script>，本身非厄米算符，但可以构造相应的厄米算符如下：</p><script type="math/tex; mode=display">\frac{1}{2}[(p \times l)-(l \times p)]=p \times l-i \hbar p</script><p>而<script type="math/tex">(\mathbf{r} \times \mathbf{l})^{+}=-(\mathbf{l} \times \mathbf{r})</script>  本身也非厄米算符，但可以构造相应的厄米算符如下:</p><script type="math/tex; mode=display">\frac{1}{2}[(\mathbf{r} \times \mathbf{l})-(\mathbf{l} \times \mathbf{r})]=\mathbf{r} \times \mathbf{l}-\mathrm{i} \hbar \mathbf{r}</script><div class="alert alert-success"><p>成功啦o(*￣▽￣*)ブ</p></div><p>The end！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;设有任意一个算符&lt;script type=&quot;math/tex&quot;&gt;\hat{A}&lt;/script&gt;（&lt;script type=&quot;math/tex&quot;&gt;\hat{A}&lt;/script&gt;可能是Hermite的，也可能不是Hermite的），其自伴算符为&lt;script type=&quot;m</summary>
      
    
    
    
    <category term="量子力学" scheme="https://colourfulywj.cn/categories/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>有符号数和无符号数的溢出判断</title>
    <link href="https://colourfulywj.cn/2021/04/15/%E6%9C%89%E7%AC%A6%E5%8F%B7%E6%95%B0%E5%92%8C%E6%97%A0%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E6%BA%A2%E5%87%BA%E5%88%A4%E6%96%AD/"/>
    <id>https://colourfulywj.cn/2021/04/15/%E6%9C%89%E7%AC%A6%E5%8F%B7%E6%95%B0%E5%92%8C%E6%97%A0%E7%AC%A6%E5%8F%B7%E6%95%B0%E7%9A%84%E6%BA%A2%E5%87%BA%E5%88%A4%E6%96%AD/</id>
    <published>2021-04-15T11:30:34.000Z</published>
    <updated>2021-04-23T15:19:47.908Z</updated>
    
    <content type="html"><![CDATA[<p>复习微机原理时看到这样一个题</p><p>“试简述无符号数和有符号数运算产生溢出的判断方法有何不同。”</p><p>一看到着这题目觉得很懵逼，无从下手，于是查了些资料</p><a id="more"></a><p><strong>无符号数判断溢出：</strong></p><p>当最高为向更高位有进位（或借位）时产生溢出。</p><p><strong>有符号数判断溢出：</strong></p><p>最高位进位状态⊕次高位进位状态=1，则溢出。</p><p>⊕为亦或，意思是当当最高位和次高位一个有进位一个没有进位是，则它们的异或结果为1，即结果产生溢出。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;复习微机原理时看到这样一个题&lt;/p&gt;
&lt;p&gt;“试简述无符号数和有符号数运算产生溢出的判断方法有何不同。”&lt;/p&gt;
&lt;p&gt;一看到着这题目觉得很懵逼，无从下手，于是查了些资料&lt;/p&gt;</summary>
    
    
    
    <category term="微机原理" scheme="https://colourfulywj.cn/categories/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>微机原理知识梳理</title>
    <link href="https://colourfulywj.cn/2021/04/06/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <id>https://colourfulywj.cn/2021/04/06/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</id>
    <published>2021-04-06T14:07:03.000Z</published>
    <updated>2021-04-23T15:19:53.077Z</updated>
    
    <content type="html"><![CDATA[<p>《微机原理与接口技术》（牟琦）知识梳理，复习自用。</p><a id="more"></a><h1 id="2微型计算机系统基础"><a href="#2微型计算机系统基础" class="headerlink" title="2微型计算机系统基础"></a>2微型计算机系统基础</h1><p><strong>系列计算机</strong>是指具有相同的基本指令系统和基本体系结构，但具有不同组成和实现的一系列不同型号的机器。</p><p>微处理器中主要的寄存器</p><p>1）指令寄存器</p><p>2）程序计数器</p><p>3）地址寄存器</p><p>4）数据寄存器</p><p>5）通用寄存器</p><p>6）程序状态字寄存器</p><p>地址分配</p><p>1）统一编址。将I/O端口和内存储器统一编址，即从整个内存空间中划出一个子空间给I/O端口，每个I/O端口分配一个地址，用访问内存的指令对I/O端口进行操作。</p><p>2）独立编址。内存储器和I/O端口地址空间各自独立编址，及I/O端口地址空间与内存储器地址空间分开设置，互不影响。</p><p>Intel系列机普遍采用I/O端口单独编制方式。CPU通过不同的指令来区分是访问内存还是访问IO端口，产生相应的控制信号。</p><p>标志寄存器FLAGS</p><p>1）状态标志反映了当前运算和操作结果的状态条件，可作为程序控制转移与否的依据。他们分别是CF、PF、AF、ZF、SF和OF。</p><p><strong>CF(Carry Flag)</strong>：进位标志位。算术运算指令执行后，若运算结果的最高位产生敬畏或借位，则CF=1；否则CF=0。</p><p><strong>PF(Parity Flag)</strong>：奇偶标志位。反应运算结果中1的个数时偶数还是奇数。运算指令执行后，若运算结果的低八位中含有偶数个1，则PF=1；否则PF=0。</p><p><strong>AF(Auxiliary carry Flag )</strong>：辅助进位标志位。算术运算指令执行后，若运算结果的低4位向高4位(即D3位向D4位)产生进位或借位，则AF=1；否则AF=0。</p><p><strong>ZF ( Zero Flag )</strong> : 零标志位。若指令运算结果为0，则ZF = 1 ；否则ZF = 0 .</p><p><strong>SF((Sign Flag )</strong>：符号标志位。它与运算结果的最高位相同。若字节运算时D7位为1或字运算时D15位为1,则SF=1；否则SF=0。用补码运算时，它能反映结果的符号特征。</p><p><strong>OF(Overflow Flag )</strong>：溢出标志位。当补码运算有溢出时(字节运算时为-128~+127,字运算时为-32768~+32767)，则OF=1；否则OF=0。</p><p>2）控制标志位则可以由指令进行置位和复位,用来控制CPU的操作,它包括DF、IF、TF。</p><p><strong>DF(Direction Flag )</strong>：方向标志位。用于串操作指令，指定字符串处理时的方向。设置DF=0时，每执行一次串操作指令，地址指针内容将自动递增；设置DF=1时，地址指针内容将自动递减。可用指令设置或清除DF位。</p><p><strong>IF(Interrupt Enable Flag )</strong>：中断允许标志位。用来控制8086是否允许接收外部中断请求。设置IF=1时，允许响应可屏蔽中断请求；设置IF=0时，禁止响应可屏蔽中断请求。可用指令设置或清除IF位。注意，IF的状态不影响非屏蔽中断请求(NMI)和CPU内部中断请求。</p><p><strong>TF(Trap Flag )</strong>：单步标志位(或跟踪标志位)。它是为调试程序而设定的陷阱控制位。设置TF=1时，使CPU进入单步执行指令工作方式，此时CPU每执行完一条指令就自动产生一次内部中断；当该位复位后，CPU恢复正常工作。可用指令设置或清除TF位。</p><h1 id="4寻址方式与指令系统"><a href="#4寻址方式与指令系统" class="headerlink" title="4寻址方式与指令系统"></a><strong>4寻址方式与指令系统</strong></h1><h2 id="4-1数据寻址方式"><a href="#4-1数据寻址方式" class="headerlink" title="4.1数据寻址方式"></a><strong>4.1数据寻址方式</strong></h2><h3 id="4-1-1立即寻址"><a href="#4-1-1立即寻址" class="headerlink" title="4.1.1立即寻址"></a>4.1.1立即寻址</h3><p>指令的操作数（地址码）字段直接给出操作数本身，这种寻址方式称为<strong>立即寻址</strong>方式，这个操作数成为<strong>立即数</strong>。格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数字表达式</span><br><span class="line"></span><br><span class="line">MOV AX, 251</span><br><span class="line">MOV AL, &#39;5&#39;</span><br><span class="line">MOV AL, 0E8H</span><br><span class="line">MOV AX, 2346H</span><br></pre></td></tr></table></figure><p>这种寻址方式不能用于单操作数指令；在双操作数指令中，立即数也只能用于源操作数，不能用于目标操作数。</p><h3 id="4-1-2寄存器寻址"><a href="#4-1-2寄存器寻址" class="headerlink" title="4.1.2寄存器寻址"></a>4.1.2寄存器寻址</h3><p>操作数在CPU内部的通用寄存器中，指令中指定寄存器名(机器指令中为寄存器的二进制编号)，这种寻址方式称为寄存器寻址。其汇编语言格式为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">寄存器名</span><br><span class="line"></span><br><span class="line">MOV AX, CX</span><br><span class="line">MOV DL, BL</span><br></pre></td></tr></table></figure><p>可以使用以下寄存器：</p><p>(1) 16位通用寄存器: <strong>AX</strong>、<strong>BX</strong>、<strong>CX</strong>、<strong>DX</strong>、<strong>SI</strong>、<strong>DI</strong>、<strong>BX</strong>、<strong>BX</strong></p><p>(2) 8位通用寄存器: <strong>AH</strong>、<strong>AL</strong>、<strong>BH</strong>、<strong>BL</strong>、<strong>CH</strong>、<strong>CL</strong>、<strong>DH</strong>、<strong>DL</strong>。</p><p>(3)段寄存器: <strong>CS</strong>、<strong>DS</strong>、<strong>SS</strong>、<strong>ES</strong>.</p><p>(4) <strong>FLAGS</strong>标志寄存器。</p><h3 id="4-1-3存储器寻址"><a href="#4-1-3存储器寻址" class="headerlink" title="4.1.3存储器寻址"></a>4.1.3存储器寻址</h3><p>存储器寻址方式，就是通过形式地址计算出操作数有效地址的过程，包括直接寻址、寄存器间接寻址、寄存器相对寻址、基址加变址寻址、相对基址加变址寻址。</p><h4 id="1）直接寻址"><a href="#1）直接寻址" class="headerlink" title="1）直接寻址"></a>1）直接寻址</h4><p>操作数在内存中，操作数的邮箱地址有指令地址码字段直接给出，这种方式称为<strong>直接寻址</strong>。直接寻址方式默认的段寄存器是DS。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EA &#x3D; DISP</span><br><span class="line"></span><br><span class="line">MOV AL, TABLE</span><br><span class="line">MOW AL, [TABLE]</span><br><span class="line">MOV AL, [1000H]</span><br></pre></td></tr></table></figure><h4 id="2）寄存器间接寻址"><a href="#2）寄存器间接寻址" class="headerlink" title="2）寄存器间接寻址"></a>2）寄存器间接寻址</h4><p>操作数的有效地址被放在一个寄存器中，该寄存器由指令地址码字段指定，<strong>EA = [BX]/[BP]/[SI]/[DI]</strong>，这种方式称为寄存器间接寻址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV AX, [BX]</span><br><span class="line">MOV AL, [BP]</span><br><span class="line">MOV AX, ES:[DI]</span><br></pre></td></tr></table></figure><h4 id="3）寄存器相对寻址"><a href="#3）寄存器相对寻址" class="headerlink" title="3）寄存器相对寻址"></a>3）寄存器相对寻址</h4><p>操作数的有效地址为基址或变址寄存器与一个位移量之和（或之差），<strong>EA = [BX]/[BP]/[SI]/[DI]  + DISP</strong>这种方式叫寄存器相对寻址*。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV AX, 20H[SI]</span><br><span class="line">MOV CL, [BP + 2000H]</span><br><span class="line">MOV AX, STR[BX]</span><br></pre></td></tr></table></figure><h4 id="4）基址加变址寻址"><a href="#4）基址加变址寻址" class="headerlink" title="4）基址加变址寻址"></a>4）基址加变址寻址</h4><p>操作数的有效地址是两个指定寄存器的值之和，<strong>EA=[BX]/[BP] + [SI]/[DI]</strong>，这种方式称为基址加变址寻址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOV AX, [BX][SI]</span><br><span class="line">MOV AX, [BX + SI]</span><br></pre></td></tr></table></figure><h4 id="5）相对基址加变址寻址"><a href="#5）相对基址加变址寻址" class="headerlink" title="5）相对基址加变址寻址"></a>5）相对基址加变址寻址</h4><p>存储单元的有效地址为一个基址寄存器、一个变址寄存器的内容及指令中指定的8位或16位位移量的和，<strong>EA=[BX]/[BP] + [SI]/[DI] + DISP</strong></p><p>，这种方式称为相对基址加变址寻址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV AL, TABLE[BX][SI]</span><br><span class="line">MOV AL, TABLE[BX + SI]</span><br><span class="line">MOV AL, [TABLE + BX + SI]</span><br></pre></td></tr></table></figure><h3 id="Ⅳ）IO端口寻址"><a href="#Ⅳ）IO端口寻址" class="headerlink" title="Ⅳ）IO端口寻址"></a>Ⅳ）IO端口寻址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IN AL, n       ;n为0~255，将端口的字节操作数输入到AL寄存器</span><br><span class="line"></span><br><span class="line">OUT DX， AL    ;DX为0~65535， 将AL的字节内容输出到由DX指定的端口中</span><br></pre></td></tr></table></figure><h2 id="4-2指令寻址方式"><a href="#4-2指令寻址方式" class="headerlink" title="4.2指令寻址方式"></a>4.2指令寻址方式</h2><p>指令寻址方式是指确定下一条将要执行指令地址的方法，有<strong>顺序寻址方式</strong>和<strong>跳转寻址方式</strong>两种</p><h3 id="跳转寻址方式"><a href="#跳转寻址方式" class="headerlink" title="跳转寻址方式"></a>跳转寻址方式</h3><h4 id="1）段内直接寻址"><a href="#1）段内直接寻址" class="headerlink" title="1）段内直接寻址"></a>1）段内直接寻址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">指令名 SHORT 目标地址标记</span><br><span class="line">指令名 NEAR PTR 目标地址标记</span><br><span class="line">指令名 目标地址标记</span><br></pre></td></tr></table></figure><h4 id="2）段间直接寻址"><a href="#2）段间直接寻址" class="headerlink" title="2）段间直接寻址"></a>2）段间直接寻址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">指令名 FAR PTR 目标地址标记</span><br><span class="line">指令名 段地址：段偏移地址</span><br></pre></td></tr></table></figure><h4 id="3）段内间接寻址"><a href="#3）段内间接寻址" class="headerlink" title="3）段内间接寻址"></a>3）段内间接寻址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">指令名 16位寄存器名</span><br><span class="line">指令名 WORD PTR 存储器寻址方式</span><br><span class="line">指令名 存储器寻址方式</span><br></pre></td></tr></table></figure><h4 id="4）段间间接寻址"><a href="#4）段间间接寻址" class="headerlink" title="4）段间间接寻址"></a>4）段间间接寻址</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指令名 DWORD PTR 存储器寻址方式</span><br></pre></td></tr></table></figure><h2 id="4-3指令系统"><a href="#4-3指令系统" class="headerlink" title="4.3指令系统"></a>4.3指令系统</h2><h3 id="4-3-1数据传送指令"><a href="#4-3-1数据传送指令" class="headerlink" title="4.3.1数据传送指令"></a>4.3.1数据传送指令</h3><h4 id="1）通用数据传送指令"><a href="#1）通用数据传送指令" class="headerlink" title="1）通用数据传送指令"></a>1）通用数据传送指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOV  DST，SRC     ;DST ← SRC</span><br></pre></td></tr></table></figure><p>①指令中两个操作数不能同为存储器操作数</p><p>②CS不能作为目标操作数</p><p>③段寄存器之间不能互相传送</p><p>④立即数不能直接送入段寄存器</p><p>⑤<strong>MOV</strong>指令不影响标志位</p><h4 id="2）堆栈操作指令"><a href="#2）堆栈操作指令" class="headerlink" title="2）堆栈操作指令"></a>2）堆栈操作指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PUSH SRC           ;SP ← SP - 2, (SP+1: SP) ← SRC</span><br><span class="line">POP DST            ;DST ← (SP+1: SP), SP ← SP + 2</span><br></pre></td></tr></table></figure><p>①<strong>PUSH、POP</strong>指令不能使用立即寻址方式，<strong>POP</strong>指令不能使用<strong>CS</strong>寄存器。</p><p>②堆栈中数据的压入、弹出必须以字为单位进行，每次<strong>PUSH</strong>操作栈顶向低地址移动两字节，而每次<strong>POP</strong>操作栈顶向高地址移动两字节。</p><p>③这两条堆栈指令不影响标志位。</p><h4 id="3）地址传送指令"><a href="#3）地址传送指令" class="headerlink" title="3）地址传送指令"></a>3）地址传送指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LEA REG, SRC       ;REG ← SRC的有效地址</span><br><span class="line">LDS REG, SRC       ;REG ← SRC, DS ← SRC + 2</span><br><span class="line">LES REG, SRC       ;REG ← SRC, ES ← SRC + 2</span><br></pre></td></tr></table></figure><p>①<strong>REG</strong>不能是段寄存器</p><p>②三条指令均不影响标志位</p><h4 id="4）标志寄存器传送指令"><a href="#4）标志寄存器传送指令" class="headerlink" title="4）标志寄存器传送指令"></a>4）标志寄存器传送指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LAHF              ;AH ← FLAGS低8位</span><br><span class="line">SAHF              ;FLAGS低8位 ← AH</span><br><span class="line">PUSHF             ;SP ← SP - 2, (SP+1: SP) ← FLAGS</span><br><span class="line">POPF              ;DST ← (SP+1: SP), SP ← SP + 2</span><br></pre></td></tr></table></figure><p>①<strong>PUSHF</strong>是标志寄存器进栈指令，这条指令不影响标志位。</p><p>②<strong>POPF</strong>是标志寄存器出栈指令，指令执行后标志位的状态取决于原来栈顶的内容。</p><p>③<strong>PUSHF</strong>和<strong>POPF</strong>指令均是无操作数指令， <strong>LAHF</strong>和<strong>SAHF</strong>指令均是无操作数指令，隐含的操作数为<strong>AH</strong>。</p><p>④<strong>SAHF</strong>指令可能会改变位于低八位<strong>SF、ZF、AF、PF</strong>和<strong>CF</strong>标志位，但不影响位于高八位的<strong>OF、DF、IF、TF</strong>标志位。</p><h4 id="5）数据交换指令"><a href="#5）数据交换指令" class="headerlink" title="5）数据交换指令"></a>5）数据交换指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XCHG DST, SRC     ;DST ← SRC</span><br></pre></td></tr></table></figure><p>①<strong>DST、SRC</strong>可以是通用寄存器或存储器，不允许是段寄存器、立即数或IP寄存器</p><p>②DST和<strong>SRC</strong>中，必须有一个是寄存器寻址方式，即两个存储单元之间不能直接互换数据</p><p>③<strong>XCHG</strong>指令不影响标志位</p><h4 id="6）换码指令"><a href="#6）换码指令" class="headerlink" title="6）换码指令"></a>6）换码指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XLAT              ;AL ← (BX + AL)</span><br></pre></td></tr></table></figure><p>①<strong>(AL)</strong>是一个八位无符号数， 所以表格中最多只能存放256个代码。</p><p>②<strong>XLAT</strong>指令的执行结果不影响标志位</p><h4 id="7）输入-输出指令"><a href="#7）输入-输出指令" class="headerlink" title="7）输入/输出指令"></a>7）输入/输出指令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IN DST, SRC</span><br><span class="line">OUT DST, SRC</span><br></pre></td></tr></table></figure><p>同之前的IO端口寻址</p><h3 id="4-3-2算术运算指令"><a href="#4-3-2算术运算指令" class="headerlink" title="4.3.2算术运算指令"></a>4.3.2算术运算指令</h3><h4 id="1）加法与减法指令"><a href="#1）加法与减法指令" class="headerlink" title="1）加法与减法指令"></a>1）加法与减法指令</h4><div class="table-container"><table><thead><tr><th style="text-align:left">指令类别</th><th>汇编格式</th><th>功能说明</th><th>影响标志位</th></tr></thead><tbody><tr><td style="text-align:left">不带进位加法指令</td><td>ADD DST, SRC</td><td>DST ← SRC+DST</td><td>影响CF、OF、AF、SF、ZF、和PF</td></tr><tr><td style="text-align:left">带进位加法指令</td><td>ADC DST, SRC</td><td>DST ← SRC+DST+CF</td><td>影响CF、OF、AF、SF、ZF、和PF</td></tr><tr><td style="text-align:left">自增指令</td><td>INC DST</td><td>DST ← SRC+1</td><td>影响OF、AF、SF、ZF、和PF，不影响CF</td></tr><tr><td style="text-align:left">不带进位减法指令</td><td>SUB DST, SRC</td><td>DST ← SRC-DST</td><td>影响CF、OF、AF、SF、ZF、和PF</td></tr><tr><td style="text-align:left">带进位减法指令</td><td>SBB DST, SRC</td><td>DST ← SRC-DST-CF</td><td>影响CF、OF、AF、SF、ZF、和PF</td></tr><tr><td style="text-align:left">自减指令</td><td>DEC DST</td><td>DST ← SRC-1</td><td>影响OF、AF、SF、ZF、和PF，不影响CF</td></tr><tr><td style="text-align:left">取负指令</td><td>NEG DST</td><td>DST ← 0-DST</td><td>影响CF、OF、AF、SF、ZF、和PF</td></tr><tr><td style="text-align:left">比较指令</td><td>CMP DST, SRC</td><td>SRC-DST并设置标志位</td><td>影响CF、OF、AF、SF、ZF、和PF</td></tr></tbody></table></div><p>两数AX和BX比较情况</p><p>①两数相等。ZF = 1</p><p>②AX和BX不相等，且均为无符号数。 若CF=0，则AX&gt;BX; 若CF=1，则AX&lt;BX。</p><p>③AX和BX不相等，且为同号的带符号数。 当OF=0时，若SF=0，则AX&gt;BX；若SF=1，则AX&lt;BX。</p><p>④AX和BX不相等，且为异号的带符号数。 当OF=1时， 若SF=1，则AX&gt;BX；若SF=0，则AX&lt;BX。</p><h4 id="2）乘法指令和除法指令"><a href="#2）乘法指令和除法指令" class="headerlink" title="2）乘法指令和除法指令"></a>2）乘法指令和除法指令</h4><div class="table-container"><table><thead><tr><th>指令类别</th><th>汇编格式</th><th>功能说明</th><th>影响标志位</th></tr></thead><tbody><tr><td>带符号乘法运算符号</td><td>IMUL SRC</td><td>字节运算：AX←AL×SRC</td><td>对除CF和OF以外的标志位无定义</td></tr><tr><td>无符号乘法运算符号</td><td>MUL SRC</td><td>字运算：DS:AX←AL×SRC</td><td>对除CF和OF以外的标志位无定义</td></tr><tr><td>带符号除法运算符号</td><td>IDIV SRC</td><td>字节运算： AL←AX/SRC的商 AL ←AX/SRC的余数</td><td>对所有的标志位无定义</td></tr><tr><td>无符号除法运算符号</td><td>DIV SRC</td><td>字运算：AX←DX:AX/SRC的商 DX ←DX:AX/SRC的余数</td><td>对所有的标志位无定义</td></tr></tbody></table></div><h4 id="3）符号拓展指令"><a href="#3）符号拓展指令" class="headerlink" title="3）符号拓展指令"></a>3）符号拓展指令</h4><p>字节拓展指令CBW：将AL中的符号位扩展到AH中，将一个字节拓展成一个字。</p><p>字拓展指令CWD：将AX中的符号位扩展到DX中，将一个字拓展成双字。</p><h4 id="4）十进制算术运算指令"><a href="#4）十进制算术运算指令" class="headerlink" title="4）十进制算术运算指令"></a>4）十进制算术运算指令</h4><div class="table-container"><table><thead><tr><th>汇编格式</th><th>功能说明</th><th>影响标志位</th></tr></thead><tbody><tr><td>DAA</td><td>压缩BCD码加法调整指令</td><td>影响AF、CF、PF、SF、ZF，对OF无定义</td></tr><tr><td>DAS</td><td>压缩BCD码减法调整指令</td><td>影响AF、CF、PF、SF、ZF，对OF无定义</td></tr><tr><td>AAA</td><td>非压缩BCD码加法调整指令</td><td>影响AF、CF，对其他状态标志无定义</td></tr><tr><td>AAS</td><td>非压缩BCD码减法调整指令</td><td>影响AF、CF，对其他状态标志无定义</td></tr><tr><td>AAM</td><td>非压缩BCD码乘法调整指令</td><td>影响SF、ZF、PF， 对OF、AF、CF无定义</td></tr><tr><td>AAD</td><td>非压缩BCD码除法调整指令</td><td>影响SF、ZF、PF，对AF、CF、OF无定义</td></tr></tbody></table></div><h3 id="4-3-3逻辑运算指令"><a href="#4-3-3逻辑运算指令" class="headerlink" title="4.3.3逻辑运算指令"></a>4.3.3逻辑运算指令</h3><div class="table-container"><table><thead><tr><th>汇编格式</th><th>功能说明</th></tr></thead><tbody><tr><td>AND  DST, SRC</td><td>逻辑与，DST←DST∧SRC</td></tr><tr><td>OR  DST, SRC</td><td>逻辑或，DST←DST∨SRC</td></tr><tr><td>XOR  DST, SRC</td><td>逻辑异或，DST←DST⊕SRC</td></tr><tr><td>TEST  DST, SRC</td><td>逻辑测试，DST∧SRC置各标志位</td></tr><tr><td>NOT DST</td><td>逻辑非，DST中各位取反</td></tr></tbody></table></div><p>NOT指令不影响标志位，其余四条指令都使CF和OF为0，对AF无定义，按运算结果设置SF、PF、ZF。TEST指令与AND指令的运算功能完全相同，差别京在于不将结果送回目的，二十通过逻辑与运算影响标志位。</p><h3 id="4-3-4位移指令"><a href="#4-3-4位移指令" class="headerlink" title="4.3.4位移指令"></a>4.3.4位移指令</h3><h4 id="1）算术移位指令"><a href="#1）算术移位指令" class="headerlink" title="1）算术移位指令"></a>1）算术移位指令</h4><p>①算术左移指令<strong>SAL</strong>，左移一次，最低位补0，最高位送入CF标志位，如图：</p><img src="/2021/04/06/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/SAL.png" class><p>意义：左移n次，等于x2的n次幂。所以可用于有符号操作数做x2的n次幂运算。</p><p>②算术右移指令<strong>SAR</strong>，右移一次，最高位保持不变，最低位送入CF标志位，如图：</p><img src="/2021/04/06/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/SAR.png" class><p>意义：右移n次，等于/2的n次幂。所以可用于有符号操作数做/2的n次幂运算。</p><h4 id="2）逻辑移位指令"><a href="#2）逻辑移位指令" class="headerlink" title="2）逻辑移位指令"></a>2）逻辑移位指令</h4><p>①逻辑左移<strong>SHL</strong>，同SAL,如图：</p><img src="/2021/04/06/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/SHL.png" class><p>意义：同SAL</p><p>②逻辑右移<strong>SHR</strong>，右移一次，最高位补0.区别！最低位送入CF标志位。如图：</p><img src="/2021/04/06/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/SHR.png" class><p>意义：用于实现无符号数/2的n次幂操作。</p><h4 id="3）循环移位指令"><a href="#3）循环移位指令" class="headerlink" title="3）循环移位指令"></a>3）循环移位指令</h4><p>①循环左移指令<strong>ROL</strong>，左移一次，左移前的最高位送入最低位以及CF.如图：</p><img src="/2021/04/06/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/ROL.png" class><p>②循环右移指令<strong>ROR</strong>，右移一次，右移前的最低位送入最高位以及CF.如图：</p><img src="/2021/04/06/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/ROR.png" class><p>③带进位的循环左移<strong>RCL</strong>，左移一次，左移前的最高位送入CF，CF的内容送入最低位.如图：</p><img src="/2021/04/06/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/RCL.png" class><p>④带进位的循环右移<strong>RCR</strong>，右移一次，右移前的最低位送入CF，CF的内容送入最高位.如图：</p><img src="/2021/04/06/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/RCR.png" class><h3 id="4-3-5串操作指令（不做要求）"><a href="#4-3-5串操作指令（不做要求）" class="headerlink" title="4.3.5串操作指令（不做要求）"></a>4.3.5串操作指令（不做要求）</h3><h3 id="4-3-6程序控制指令-不影响标志位"><a href="#4-3-6程序控制指令-不影响标志位" class="headerlink" title="4.3.6程序控制指令(不影响标志位)"></a>4.3.6程序控制指令(不影响标志位)</h3><h4 id="1）转移指令"><a href="#1）转移指令" class="headerlink" title="1）转移指令"></a>1）转移指令</h4><p>①无条件转移指令JMP</p><div class="table-container"><table><thead><tr><th>寻址方式</th><th>汇编格式</th><th>功能说明</th></tr></thead><tbody><tr><td>段内直接转移</td><td>JMP SHORT OPR</td><td>(IP)←(IP)+8位位移量，段内直接短转移</td></tr><tr><td></td><td>JMP NEAR PTR OPR</td><td>(IP)←(IP)+16位位移量，段内直接近转移</td></tr><tr><td>段内间接转移</td><td>JMP OPR1</td><td>(IP)←(EA)，OPR1为16位寄存器名或存储器寻址方式，EA为由OPR1指定的有效地址</td></tr><tr><td>段间直接转移</td><td>JMP FAR PTR OPR</td><td>(IP)←目标地址的偏移地址，(CS)←目标地址的段地址</td></tr><tr><td>段间间接转移</td><td>JMP DWORD OPR</td><td>(IP)←(EA)，EA为由OPR指定的有效地址，(CS)←(EA+2)</td></tr></tbody></table></div><p>②条件转移指令</p><div class="table-container"><table><thead><tr><th>分类</th><th>汇编格式</th><th>条件说明</th></tr></thead><tbody><tr><td>简单条件转移指令</td><td>JC OPR</td><td>CF=1,有进位/有借位转移</td></tr><tr><td></td><td>JNC OPR</td><td>CF=0,无进位/无借位转移</td></tr><tr><td></td><td>JS OPR</td><td>SF=1,是负数转移</td></tr><tr><td></td><td>JNS OPR</td><td>SF=0,是正数转移</td></tr><tr><td></td><td>JO OPR</td><td>OF=1,有溢出转移</td></tr><tr><td></td><td>JNO OPR</td><td>OF=0,无溢出转移</td></tr><tr><td></td><td>JZ/JE OPR</td><td>ZF=1,相等/为0转移</td></tr><tr><td></td><td>JNZ/JNE OPR</td><td>ZF=0,不相等/不为0转移</td></tr><tr><td></td><td>JP/JPE OPR</td><td>PF=1,有偶数个1转移</td></tr><tr><td></td><td>JNP/JPO OPR</td><td>PF=0,有奇数个1转移</td></tr><tr><td>无符号数条件转移指令</td><td>JA/JNBE OPR</td><td>CF=0且ZF=0,高于/不低于或等于转移</td></tr><tr><td></td><td>JAE/JNB OPR</td><td>CF=0或ZF=1,高于等于/不低于转移</td></tr><tr><td></td><td>JB/JNAE OPR</td><td>CF=1且ZF=0,低于/不高于或等于转移</td></tr><tr><td></td><td>JBE/JNA OPR</td><td>CF=1或ZF=1,低于等于/不高于转移</td></tr><tr><td>带符号数条件转移指令</td><td>JG/JNLE OPR</td><td>SF=OF且ZF=0,大于/不小于或等于转移</td></tr><tr><td></td><td>JGE/JNL OPR</td><td>SF=OF或ZF=1,大于或等于/不小于转移</td></tr><tr><td></td><td>JL/JNGE OPR</td><td>SF≠OF且ZF=0,小于/不大于或等于转移</td></tr><tr><td></td><td>JLE/JNG OPR</td><td>SF≠OF或ZF=1,小于或等于/不大于转移</td></tr></tbody></table></div><p>③循环控制指令</p><div class="table-container"><table><thead><tr><th>汇编格式</th><th>功能说明</th></tr></thead><tbody><tr><td>LOOP OPR</td><td>(CX)←(CX)-1，(CX)≠0时，转到OPR</td></tr><tr><td>LOOPZ/LOOPE OPR</td><td>(CX)←(CX)- 1，(CX)≠0且ZF=1时，转到OPR</td></tr><tr><td>LOOPNZ/LOOPNE OPR</td><td>(CX)←(CX)- 1，(CX)≠0且ZF=0时，转到OPR</td></tr><tr><td>JCXZ OPR</td><td>(CX)=0时转到OPR</td></tr></tbody></table></div><h4 id="2-子程序调用和返回"><a href="#2-子程序调用和返回" class="headerlink" title="2.子程序调用和返回"></a>2.子程序调用和返回</h4><div class="table-container"><table><thead><tr><th>汇编格式</th><th>功能说明</th><th>操作</th></tr></thead><tbody><tr><td>CALL NEAR PTR OPR</td><td>段内直接调用</td><td>(SP)←(SP)-2                   ;</td></tr><tr><td>CALL OPR</td><td></td><td>((SP)+1:(SP))←(IP)         ;</td></tr><tr><td></td><td></td><td>(IP)←(IP)+16位位移量   ;</td></tr><tr><td>CALL OPR</td><td>段间直接调用</td><td>(SP)←(SP)-2                   ;</td></tr><tr><td>CALL WORD PTR OPR</td><td></td><td>((SP)+1:(SP))←(IP)         ;</td></tr><tr><td></td><td></td><td>(IP)←(EA)                       ;</td></tr><tr><td>CALL FAR PTR OPR</td><td>段间直接调用</td><td>(SP)←(SP)-2                   ;</td></tr><tr><td></td><td></td><td>((SP)+1:(SP))←(CS)        ;</td></tr><tr><td></td><td></td><td>(SP)←(SP)-2                   ;</td></tr><tr><td></td><td></td><td>((SP)+1:(SP))←(IP)         ;</td></tr><tr><td></td><td></td><td>(IP)←OPR偏移地址       ；</td></tr><tr><td></td><td></td><td>(CS)←OPR段地址          ；</td></tr><tr><td>CALL DWORD PTR OPR</td><td>段间间接调用</td><td>(SP)←(SP)-2                   ;</td></tr><tr><td></td><td></td><td>((SP)+1:(SP))←(CS)        ;</td></tr><tr><td></td><td></td><td>(SP)←(SP)-2                   ;</td></tr><tr><td></td><td></td><td>((SP)+1:(SP))←(IP)         ;</td></tr><tr><td></td><td></td><td>(IP)←((EA))                    ；</td></tr><tr><td></td><td></td><td>(CS)←((EA+2))               ;</td></tr><tr><td>RET     RETF</td><td>段内/段间子程序返回</td><td></td></tr><tr><td>RET n    RETF n</td><td>带偏移量n的段内/段间子程序返回</td></tr></tbody></table></div><h3 id="4-3-7处理器控制指令"><a href="#4-3-7处理器控制指令" class="headerlink" title="4.3.7处理器控制指令"></a>4.3.7处理器控制指令</h3><p>1）标志位处理指令</p><div class="table-container"><table><thead><tr><th>汇编格式</th><th>功能说明</th></tr></thead><tbody><tr><td>CLC</td><td>进位位清0指令，(CF)←0</td></tr><tr><td>STC</td><td>进位位置1指令，(CF)←1</td></tr><tr><td>CMC</td><td>进位位取反指令，(CF)←(CF)取反</td></tr><tr><td>CLD</td><td>方向标志清0指令，(DF)←0</td></tr><tr><td>STD</td><td>方向标志置1指令，(DF)←1</td></tr><tr><td>CLI</td><td>中断标志清0指令，(IF)←0</td></tr><tr><td>STI</td><td>中断标志置1指令，(IF)←1</td></tr></tbody></table></div><p>2）其他处理器指令</p><div class="table-container"><table><thead><tr><th>汇编格式</th><th>功能说明</th></tr></thead><tbody><tr><td>HLT</td><td>暂停</td></tr><tr><td>WAIT</td><td>等待</td></tr><tr><td>LOCK</td><td>总线锁定前置</td></tr><tr><td>NOP</td><td>空操作</td></tr><tr><td>ESC DATA, SRC</td><td>外部设备换码</td></tr></tbody></table></div><h1 id="5汇编语言程序设计"><a href="#5汇编语言程序设计" class="headerlink" title="5汇编语言程序设计"></a>5汇编语言程序设计</h1><h2 id="5-1汇编语言中的数据"><a href="#5-1汇编语言中的数据" class="headerlink" title="5.1汇编语言中的数据"></a>5.1汇编语言中的数据</h2><h3 id="5-1-1常量"><a href="#5-1-1常量" class="headerlink" title="5.1.1常量"></a>5.1.1常量</h3><p>常量是指在程序运行过程中不变的量，8086汇编语言允许的常量如下。</p><p>1）数值常量</p><p>汇编语言中数值常量可以是二进制、八进制、十进制或十六进制数。</p><p>2）字符串常量</p><p>包含在单引号中的若干字符形成字符串常量。</p><p>3）符号常量常量用符号名来代替就是符号常数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COUNT EQU 3</span><br><span class="line">COUNT &#x3D; 3</span><br></pre></td></tr></table></figure><h3 id="5-1-2变量"><a href="#5-1-2变量" class="headerlink" title="5.1.2变量"></a><strong>5.1.2变量</strong></h3><p>变量是存放在内存中某个存储区域中的数据，这些数据在程序运行期间随时可以修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[变量名] 伪指令(DB&#x2F;DW&#x2F;DD&#x2F;DF&#x2F;DQ&#x2F;DT) 表达式(数值表达式&#x2F;&#39;?&#39;&#x2F;字符串表达式&#x2F;DUP表达式) [, 表达式 …]</span><br><span class="line">DUP表达式：N DUP (EXP)   ；N为重复次数，EXP为表达式</span><br></pre></td></tr></table></figure><p>变量的属性</p><p>①段属性：变量所在段的起始地址，此值必须在一个段寄存器中。</p><p>②偏移属性：该变量与段的起始地址之间相距的字节数。</p><p>③类型属性：定义该变量的字节数。</p><p>可通过SEG、OFFSET和TYPE取得变量的属性。</p><p>变量的使用</p><p>①变量名作为存储单元的直接地址</p><p>②用合成运算符PTR可以临时改变变量类型</p><p>③变量名作为相对寻址中的偏移量</p><p>④变量名仅对应数据区第一个数据项</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;《微机原理与接口技术》（牟琦）知识梳理，复习自用。&lt;/p&gt;</summary>
    
    
    
    <category term="微机原理" scheme="https://colourfulywj.cn/categories/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>Schrodinger</title>
    <link href="https://colourfulywj.cn/2021/03/16/Schrodinger/"/>
    <id>https://colourfulywj.cn/2021/03/16/Schrodinger/</id>
    <published>2021-03-16T14:11:36.000Z</published>
    <updated>2021-04-23T15:16:26.237Z</updated>
    
    <content type="html"><![CDATA[<p>自由粒子的一般状态方程：</p><a id="more"></a><script type="math/tex; mode=display">i \hbar \frac{\partial}{\partial t} \Psi(\mathbf{r}, t)=-\frac{\hbar^{2}}{2 m} \nabla^{2} \Psi(\mathbf{r}, t)</script><p>在势场中的粒子的波函数满足的微分方程：</p><script type="math/tex; mode=display">i \hbar \frac{\partial}{\partial t} \Psi(\mathbf{r}, t)=-\frac{\hbar^{2}}{2 m} \nabla^{2} \Psi(\mathbf{r}, t)+V(\mathbf{r}) \Psi(\mathbf{r}, t)</script><p>一维无限深方势阱   <script type="math/tex">V(x)=\left\{\begin{array}{ll}0, & 0<x<a \\\infty, & x<0, x>a\end{array}\right.</script>   中的定态能量和波函数为</p><script type="math/tex; mode=display">E_{n}=\frac{n^{2} \pi^{2} \hbar^{2}}{2 \mu a^{2}}, \quad n=1,2, \cdots</script><script type="math/tex; mode=display">\psi_{n}(x)=\left\{\begin{array}{ll}\sqrt{\frac{2}{a}} \sin \frac{n \pi x}{a}, & 0<x<a \\0, & x<0, x>a\end{array}\right.</script><p>如果坐标原点取在势阱中心，则定态波函数为</p><script type="math/tex; mode=display">\psi_{n}(x)=\left\{\begin{array}{cl}\sqrt{\frac{2}{a}} \sin \left[\frac{n \pi}{a}\left(x+\frac{a}{2}\right)\right], & |x|<\frac{a}{2} \\ 0, & |x|>\frac{a}{2}\end{array}\right.</script><p><img src="/img/banner.jpg" alt="direct"></p><p>(1)量子力学适用于微观体系，而经典力学适用于宏观体系;</p><p>(2)量子力学适用于h不能忽略的体系，而经典力学适用于h可以忽略的体系。</p><p>答: (1)量子力学是比经典力学更为普遍的理论体系，它可以包容整个经典力学体系。</p><p>(2)对于宏观体系或h可以忽略的体系，并非量子力学不能适用，而是量子力学实际上已经过渡到经典力学，二者相吻合了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;自由粒子的一般状态方程：&lt;/p&gt;</summary>
    
    
    
    <category term="量子力学" scheme="https://colourfulywj.cn/categories/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6/"/>
    
    
  </entry>
  
</feed>
